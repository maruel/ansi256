// Copyright 2016 Marc-Antoine Ruel. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Package ansi256 enables calibrating the ANSI color in a terminal.
package ansi256

import (
	"fmt"
	"image/color"
	"runtime"
	"sort"
)

// Default is the default palette to use. It is selected based on the OS.
var Default = &Term256

func init() {
	if runtime.GOOS == "darwin" {
		Default = &TermOSX
	} else if runtime.GOOS == "linux" {
		// That's not really true but it's a first approximation.
		Default = &TermGnome
	}
}

// Raw returns a string using expanded syntax.
//
// Your terminal may not support it. In that case, fall back to the palette.
func Raw(foreground bool, c color.NRGBA) string {
	cR, cG, cB, _ := c.RGBA()
	r := int(cR >> 8)
	g := int(cG >> 8)
	b := int(cB >> 8)
	if foreground {
		return fmt.Sprintf("\033[38;2;%d;%d;%dm ", r, g, b)
	}
	return fmt.Sprintf("\033[48;2;%d;%d;%dm ", r, g, b)
}

// Palette is the color palette to use. The alpha value is ignored.
type Palette [256]color.NRGBA

// ANSI pick the closest term-256 color.
//
// The color is converted to alpha-multiplied RGBA so this is important that
// alpha is set to 255 for full color. The return value is between 0 and 255.
func (p *Palette) ANSI(c color.NRGBA) int {
	// "Optimized" version of color.Palette{}.Index() that premultiplies c.A then
	// discards c.A.
	closest := 0
	delta := 1<<31 - 1
	cR, cG, cB, _ := c.RGBA()
	r := int(cR >> 8)
	g := int(cG >> 8)
	b := int(cB >> 8)
	for i, col := range *p {
		if d := getDelta(r, g, b, col); d < delta {
			delta = d
			closest = i
		}
	}
	return closest
}

// Block returns a character with ANSI code to represent the color as closely
// as possible using a shaded block and two colors. It is important to clear
// with "\033[0m" after when done.
func (p *Palette) Block(c color.NRGBA) string {
	cR, cG, cB, _ := c.RGBA()
	r := int(cR >> 8)
	g := int(cG >> 8)
	b := int(cB >> 8)
	for i, col := range *p {
		if r == int(col.R) && g == int(col.G) && b == int(col.B) {
			// Exact match. Only set the back color and use a white space.
			return fmt.Sprintf("\033[48;5;%dm ", i)
		}
	}

	d := make(deltas, 0, 64)
	const max = 96 * 96 * 3
	for i, col := range *p {
		// Only keep deltas below 48²*3 so limit the number of items to sort below.
		if n := getDelta(r, g, b, col); n < max {
			d = append(d, item{i, n})
		}
	}
	sort.Sort(d)

	// Mix two colors at a time with 3 mixes (25%-75%, 50%-50% or 75%-25%). Find
	// the one with the smallest eucledian distance.
	closestA := 0
	closestB := 0
	char := '░'
	delta := 1<<31 - 1
	// Since the algorithm is O(N²), select the 8 closest colors first.
	count := 8
	if count > len(d) {
		count = len(d)
	}
	for i := 0; i < count; i++ {
		for j := 0; j < count; j++ {
			if i == j {
				continue
			}
			c1 := (*p)[d[i].index]
			c2 := (*p)[d[j].index]
			c25 := color.NRGBA{(c1.R + c1.R + c2.R + 1) / 3, (c1.G + c1.G + c2.G + 1) / 3, (c1.B + c1.B + c2.B + 1) / 3, 255}
			if n := getDelta(r, g, b, c25); n < delta {
				delta = n
				closestA = d[i].index
				closestB = d[j].index
				char = '░'
			}
			c50 := color.NRGBA{(c1.R + c2.R + 1) / 2, (c1.G + c2.G + 1) / 2, (c1.B + c2.B + 1) / 2, 255}
			if n := getDelta(r, g, b, c50); n < delta {
				delta = n
				closestA = d[i].index
				closestB = d[j].index
				char = '▒'
			}
		}
	}
	return fmt.Sprintf("\033[48;5;%dm\033[38;5;%dm%c", closestA, closestB, char)
}

// Term256 is the default look up table for ANSI color codes according to
// xterm-256.
var Term256 = Palette{
	{0x00, 0x00, 0x00, 0xFF},
	{0x80, 0x00, 0x00, 0xFF},
	{0x00, 0x80, 0x00, 0xFF},
	{0x80, 0x80, 0x00, 0xFF},
	{0x00, 0x00, 0x80, 0xFF},
	{0x80, 0x00, 0x80, 0xFF},
	{0x00, 0x80, 0x80, 0xFF},
	{0xC0, 0xC0, 0xC0, 0xFF},
	{0x80, 0x80, 0x80, 0xFF},
	{0xFF, 0x00, 0x00, 0xFF},
	{0x00, 0xFF, 0x00, 0xFF},
	{0xFF, 0xFF, 0x00, 0xFF},
	{0x00, 0x00, 0xFF, 0xFF},
	{0xFF, 0x00, 0xFF, 0xFF},
	{0x00, 0xFF, 0xFF, 0xFF},
	{0xFF, 0xFF, 0xFF, 0xFF},
	{0x00, 0x00, 0x00, 0xFF},
	{0x00, 0x00, 0x5F, 0xFF},
	{0x00, 0x00, 0x87, 0xFF},
	{0x00, 0x00, 0xAF, 0xFF},
	{0x00, 0x00, 0xD7, 0xFF},
	{0x00, 0x00, 0xFF, 0xFF},
	{0x00, 0x5F, 0x00, 0xFF},
	{0x00, 0x5F, 0x5F, 0xFF},
	{0x00, 0x5F, 0x87, 0xFF},
	{0x00, 0x5F, 0xAF, 0xFF},
	{0x00, 0x5F, 0xD7, 0xFF},
	{0x00, 0x5F, 0xFF, 0xFF},
	{0x00, 0x87, 0x00, 0xFF},
	{0x00, 0x87, 0x5F, 0xFF},
	{0x00, 0x87, 0x87, 0xFF},
	{0x00, 0x87, 0xAF, 0xFF},
	{0x00, 0x87, 0xD7, 0xFF},
	{0x00, 0x87, 0xFF, 0xFF},
	{0x00, 0xAF, 0x00, 0xFF},
	{0x00, 0xAF, 0x5F, 0xFF},
	{0x00, 0xAF, 0x87, 0xFF},
	{0x00, 0xAF, 0xAF, 0xFF},
	{0x00, 0xAF, 0xD7, 0xFF},
	{0x00, 0xAF, 0xFF, 0xFF},
	{0x00, 0xD7, 0x00, 0xFF},
	{0x00, 0xD7, 0x5F, 0xFF},
	{0x00, 0xD7, 0x87, 0xFF},
	{0x00, 0xD7, 0xAF, 0xFF},
	{0x00, 0xD7, 0xD7, 0xFF},
	{0x00, 0xD7, 0xFF, 0xFF},
	{0x00, 0xFF, 0x00, 0xFF},
	{0x00, 0xFF, 0x5F, 0xFF},
	{0x00, 0xFF, 0x87, 0xFF},
	{0x00, 0xFF, 0xAF, 0xFF},
	{0x00, 0xFF, 0xD7, 0xFF},
	{0x00, 0xFF, 0xFF, 0xFF},
	{0x5F, 0x00, 0x00, 0xFF},
	{0x5F, 0x00, 0x5F, 0xFF},
	{0x5F, 0x00, 0x87, 0xFF},
	{0x5F, 0x00, 0xAF, 0xFF},
	{0x5F, 0x00, 0xD7, 0xFF},
	{0x5F, 0x00, 0xFF, 0xFF},
	{0x5F, 0x5F, 0x00, 0xFF},
	{0x5F, 0x5F, 0x5F, 0xFF},
	{0x5F, 0x5F, 0x87, 0xFF},
	{0x5F, 0x5F, 0xAF, 0xFF},
	{0x5F, 0x5F, 0xD7, 0xFF},
	{0x5F, 0x5F, 0xFF, 0xFF},
	{0x5F, 0x87, 0x00, 0xFF},
	{0x5F, 0x87, 0x5F, 0xFF},
	{0x5F, 0x87, 0x87, 0xFF},
	{0x5F, 0x87, 0xAF, 0xFF},
	{0x5F, 0x87, 0xD7, 0xFF},
	{0x5F, 0x87, 0xFF, 0xFF},
	{0x5F, 0xAF, 0x00, 0xFF},
	{0x5F, 0xAF, 0x5F, 0xFF},
	{0x5F, 0xAF, 0x87, 0xFF},
	{0x5F, 0xAF, 0xAF, 0xFF},
	{0x5F, 0xAF, 0xD7, 0xFF},
	{0x5F, 0xAF, 0xFF, 0xFF},
	{0x5F, 0xD7, 0x00, 0xFF},
	{0x5F, 0xD7, 0x5F, 0xFF},
	{0x5F, 0xD7, 0x87, 0xFF},
	{0x5F, 0xD7, 0xAF, 0xFF},
	{0x5F, 0xD7, 0xD7, 0xFF},
	{0x5F, 0xD7, 0xFF, 0xFF},
	{0x5F, 0xFF, 0x00, 0xFF},
	{0x5F, 0xFF, 0x5F, 0xFF},
	{0x5F, 0xFF, 0x87, 0xFF},
	{0x5F, 0xFF, 0xAF, 0xFF},
	{0x5F, 0xFF, 0xD7, 0xFF},
	{0x5F, 0xFF, 0xFF, 0xFF},
	{0x87, 0x00, 0x00, 0xFF},
	{0x87, 0x00, 0x5F, 0xFF},
	{0x87, 0x00, 0x87, 0xFF},
	{0x87, 0x00, 0xAF, 0xFF},
	{0x87, 0x00, 0xD7, 0xFF},
	{0x87, 0x00, 0xFF, 0xFF},
	{0x87, 0x5F, 0x00, 0xFF},
	{0x87, 0x5F, 0x5F, 0xFF},
	{0x87, 0x5F, 0x87, 0xFF},
	{0x87, 0x5F, 0xAF, 0xFF},
	{0x87, 0x5F, 0xD7, 0xFF},
	{0x87, 0x5F, 0xFF, 0xFF},
	{0x87, 0x87, 0x00, 0xFF},
	{0x87, 0x87, 0x5F, 0xFF},
	{0x87, 0x87, 0x87, 0xFF},
	{0x87, 0x87, 0xAF, 0xFF},
	{0x87, 0x87, 0xD7, 0xFF},
	{0x87, 0x87, 0xFF, 0xFF},
	{0x87, 0xAF, 0x00, 0xFF},
	{0x87, 0xAF, 0x5F, 0xFF},
	{0x87, 0xAF, 0x87, 0xFF},
	{0x87, 0xAF, 0xAF, 0xFF},
	{0x87, 0xAF, 0xD7, 0xFF},
	{0x87, 0xAF, 0xFF, 0xFF},
	{0x87, 0xD7, 0x00, 0xFF},
	{0x87, 0xD7, 0x5F, 0xFF},
	{0x87, 0xD7, 0x87, 0xFF},
	{0x87, 0xD7, 0xAF, 0xFF},
	{0x87, 0xD7, 0xD7, 0xFF},
	{0x87, 0xD7, 0xFF, 0xFF},
	{0x87, 0xFF, 0x00, 0xFF},
	{0x87, 0xFF, 0x5F, 0xFF},
	{0x87, 0xFF, 0x87, 0xFF},
	{0x87, 0xFF, 0xAF, 0xFF},
	{0x87, 0xFF, 0xD7, 0xFF},
	{0x87, 0xFF, 0xFF, 0xFF},
	{0xAF, 0x00, 0x00, 0xFF},
	{0xAF, 0x00, 0x5F, 0xFF},
	{0xAF, 0x00, 0x87, 0xFF},
	{0xAF, 0x00, 0xAF, 0xFF},
	{0xAF, 0x00, 0xD7, 0xFF},
	{0xAF, 0x00, 0xFF, 0xFF},
	{0xAF, 0x5F, 0x00, 0xFF},
	{0xAF, 0x5F, 0x5F, 0xFF},
	{0xAF, 0x5F, 0x87, 0xFF},
	{0xAF, 0x5F, 0xAF, 0xFF},
	{0xAF, 0x5F, 0xD7, 0xFF},
	{0xAF, 0x5F, 0xFF, 0xFF},
	{0xAF, 0x87, 0x00, 0xFF},
	{0xAF, 0x87, 0x5F, 0xFF},
	{0xAF, 0x87, 0x87, 0xFF},
	{0xAF, 0x87, 0xAF, 0xFF},
	{0xAF, 0x87, 0xD7, 0xFF},
	{0xAF, 0x87, 0xFF, 0xFF},
	{0xAF, 0xAF, 0x00, 0xFF},
	{0xAF, 0xAF, 0x5F, 0xFF},
	{0xAF, 0xAF, 0x87, 0xFF},
	{0xAF, 0xAF, 0xAF, 0xFF},
	{0xAF, 0xAF, 0xD7, 0xFF},
	{0xAF, 0xAF, 0xFF, 0xFF},
	{0xAF, 0xD7, 0x00, 0xFF},
	{0xAF, 0xD7, 0x5F, 0xFF},
	{0xAF, 0xD7, 0x87, 0xFF},
	{0xAF, 0xD7, 0xAF, 0xFF},
	{0xAF, 0xD7, 0xD7, 0xFF},
	{0xAF, 0xD7, 0xFF, 0xFF},
	{0xAF, 0xFF, 0x00, 0xFF},
	{0xAF, 0xFF, 0x5F, 0xFF},
	{0xAF, 0xFF, 0x87, 0xFF},
	{0xAF, 0xFF, 0xAF, 0xFF},
	{0xAF, 0xFF, 0xD7, 0xFF},
	{0xAF, 0xFF, 0xFF, 0xFF},
	{0xD7, 0x00, 0x00, 0xFF},
	{0xD7, 0x00, 0x5F, 0xFF},
	{0xD7, 0x00, 0x87, 0xFF},
	{0xD7, 0x00, 0xAF, 0xFF},
	{0xD7, 0x00, 0xD7, 0xFF},
	{0xD7, 0x00, 0xFF, 0xFF},
	{0xD7, 0x5F, 0x00, 0xFF},
	{0xD7, 0x5F, 0x5F, 0xFF},
	{0xD7, 0x5F, 0x87, 0xFF},
	{0xD7, 0x5F, 0xAF, 0xFF},
	{0xD7, 0x5F, 0xD7, 0xFF},
	{0xD7, 0x5F, 0xFF, 0xFF},
	{0xD7, 0x87, 0x00, 0xFF},
	{0xD7, 0x87, 0x5F, 0xFF},
	{0xD7, 0x87, 0x87, 0xFF},
	{0xD7, 0x87, 0xAF, 0xFF},
	{0xD7, 0x87, 0xD7, 0xFF},
	{0xD7, 0x87, 0xFF, 0xFF},
	{0xD7, 0xAF, 0x00, 0xFF},
	{0xD7, 0xAF, 0x5F, 0xFF},
	{0xD7, 0xAF, 0x87, 0xFF},
	{0xD7, 0xAF, 0xAF, 0xFF},
	{0xD7, 0xAF, 0xD7, 0xFF},
	{0xD7, 0xAF, 0xFF, 0xFF},
	{0xD7, 0xD7, 0x00, 0xFF},
	{0xD7, 0xD7, 0x5F, 0xFF},
	{0xD7, 0xD7, 0x87, 0xFF},
	{0xD7, 0xD7, 0xAF, 0xFF},
	{0xD7, 0xD7, 0xD7, 0xFF},
	{0xD7, 0xD7, 0xFF, 0xFF},
	{0xD7, 0xFF, 0x00, 0xFF},
	{0xD7, 0xFF, 0x5F, 0xFF},
	{0xD7, 0xFF, 0x87, 0xFF},
	{0xD7, 0xFF, 0xAF, 0xFF},
	{0xD7, 0xFF, 0xD7, 0xFF},
	{0xD7, 0xFF, 0xFF, 0xFF},
	{0xFF, 0x00, 0x00, 0xFF},
	{0xFF, 0x00, 0x5F, 0xFF},
	{0xFF, 0x00, 0x87, 0xFF},
	{0xFF, 0x00, 0xAF, 0xFF},
	{0xFF, 0x00, 0xD7, 0xFF},
	{0xFF, 0x00, 0xFF, 0xFF},
	{0xFF, 0x5F, 0x00, 0xFF},
	{0xFF, 0x5F, 0x5F, 0xFF},
	{0xFF, 0x5F, 0x87, 0xFF},
	{0xFF, 0x5F, 0xAF, 0xFF},
	{0xFF, 0x5F, 0xD7, 0xFF},
	{0xFF, 0x5F, 0xFF, 0xFF},
	{0xFF, 0x87, 0x00, 0xFF},
	{0xFF, 0x87, 0x5F, 0xFF},
	{0xFF, 0x87, 0x87, 0xFF},
	{0xFF, 0x87, 0xAF, 0xFF},
	{0xFF, 0x87, 0xD7, 0xFF},
	{0xFF, 0x87, 0xFF, 0xFF},
	{0xFF, 0xAF, 0x00, 0xFF},
	{0xFF, 0xAF, 0x5F, 0xFF},
	{0xFF, 0xAF, 0x87, 0xFF},
	{0xFF, 0xAF, 0xAF, 0xFF},
	{0xFF, 0xAF, 0xD7, 0xFF},
	{0xFF, 0xAF, 0xFF, 0xFF},
	{0xFF, 0xD7, 0x00, 0xFF},
	{0xFF, 0xD7, 0x5F, 0xFF},
	{0xFF, 0xD7, 0x87, 0xFF},
	{0xFF, 0xD7, 0xAF, 0xFF},
	{0xFF, 0xD7, 0xD7, 0xFF},
	{0xFF, 0xD7, 0xFF, 0xFF},
	{0xFF, 0xFF, 0x00, 0xFF},
	{0xFF, 0xFF, 0x5F, 0xFF},
	{0xFF, 0xFF, 0x87, 0xFF},
	{0xFF, 0xFF, 0xAF, 0xFF},
	{0xFF, 0xFF, 0xD7, 0xFF},
	{0xFF, 0xFF, 0xFF, 0xFF},
	{0x08, 0x08, 0x08, 0xFF},
	{0x12, 0x12, 0x12, 0xFF},
	{0x1C, 0x1C, 0x1C, 0xFF},
	{0x26, 0x26, 0x26, 0xFF},
	{0x30, 0x30, 0x30, 0xFF},
	{0x3A, 0x3A, 0x3A, 0xFF},
	{0x44, 0x44, 0x44, 0xFF},
	{0x4E, 0x4E, 0x4E, 0xFF},
	{0x58, 0x58, 0x58, 0xFF},
	{0x60, 0x60, 0x60, 0xFF},
	{0x66, 0x66, 0x66, 0xFF},
	{0x76, 0x76, 0x76, 0xFF},
	{0x80, 0x80, 0x80, 0xFF},
	{0x8A, 0x8A, 0x8A, 0xFF},
	{0x94, 0x94, 0x94, 0xFF},
	{0x9E, 0x9E, 0x9E, 0xFF},
	{0xA8, 0xA8, 0xA8, 0xFF},
	{0xB2, 0xB2, 0xB2, 0xFF},
	{0xBC, 0xBC, 0xBC, 0xFF},
	{0xC6, 0xC6, 0xC6, 0xFF},
	{0xD0, 0xD0, 0xD0, 0xFF},
	{0xDA, 0xDA, 0xDA, 0xFF},
	{0xE4, 0xE4, 0xE4, 0xFF},
	{0xEE, 0xEE, 0xEE, 0xFF},
}

// TermOSX is the colors as displayed on OSX.
//
// This table was generated via a screenshot generated by ./cmd/output256 sent
// to ./cmd/calibrate256 using the Pro theme.
var TermOSX = Palette{
	{0x00, 0x00, 0x00, 0xFF},
	{0x9B, 0x00, 0x00, 0xFF},
	{0x00, 0xA8, 0x22, 0xFF},
	{0x99, 0x9B, 0x1F, 0xFF},
	{0x07, 0x00, 0xAF, 0xFF},
	{0xB5, 0x00, 0xAF, 0xFF},
	{0x00, 0xA6, 0xB2, 0xFF},
	{0xBF, 0xBF, 0xBF, 0xFF},
	{0x66, 0x66, 0x66, 0xFF},
	{0xE9, 0x00, 0x01, 0xFF},
	{0x00, 0xDB, 0x2F, 0xFF},
	{0xE5, 0xE8, 0x33, 0xFF},
	{0x10, 0x00, 0xFA, 0xFF},
	{0xE9, 0x00, 0xE1, 0xFF},
	{0x00, 0xE6, 0xE5, 0xFF},
	{0xE6, 0xE5, 0xE6, 0xFF},
	{0x00, 0x00, 0x00, 0xFF},
	{0x02, 0x00, 0x5D, 0xFF},
	{0x04, 0x00, 0x84, 0xFF},
	{0x07, 0x00, 0xAC, 0xFF},
	{0x0B, 0x00, 0xD3, 0xFF},
	{0x10, 0x00, 0xFA, 0xFF},
	{0x00, 0x60, 0x0F, 0xFF},
	{0x00, 0x5F, 0x5F, 0xFF},
	{0x00, 0x5E, 0x86, 0xFF},
	{0x00, 0x5C, 0xAD, 0xFF},
	{0x00, 0x5A, 0xD4, 0xFF},
	{0x03, 0x57, 0xFB, 0xFF},
	{0x00, 0x89, 0x1A, 0xFF},
	{0x00, 0x88, 0x61, 0xFF},
	{0x00, 0x87, 0x87, 0xFF},
	{0x00, 0x86, 0xAE, 0xFF},
	{0x00, 0x84, 0xD4, 0xFF},
	{0x00, 0x83, 0xFB, 0xFF},
	{0x00, 0xB1, 0x24, 0xFF},
	{0x00, 0xB0, 0x64, 0xFF},
	{0x00, 0xB0, 0x89, 0xFF},
	{0x00, 0xAF, 0xAF, 0xFF},
	{0x00, 0xAE, 0xD6, 0xFF},
	{0x00, 0xAD, 0xFC, 0xFF},
	{0x00, 0xD9, 0x2F, 0xFF},
	{0x00, 0xD9, 0x68, 0xFF},
	{0x00, 0xD9, 0x8C, 0xFF},
	{0x00, 0xD8, 0xB1, 0xFF},
	{0x00, 0xD7, 0xD7, 0xFF},
	{0x00, 0xD6, 0xFD, 0xFF},
	{0x00, 0xFF, 0x39, 0xFF},
	{0x00, 0xFF, 0x6C, 0xFF},
	{0x00, 0xFF, 0x8F, 0xFF},
	{0x00, 0xFF, 0xB3, 0xFF},
	{0x00, 0xFF, 0xD9, 0xFF},
	{0x00, 0xFF, 0xFF, 0xFF},
	{0x60, 0x00, 0x00, 0xFF},
	{0x61, 0x00, 0x5D, 0xFF},
	{0x61, 0x00, 0x84, 0xFF},
	{0x61, 0x00, 0xAC, 0xFF},
	{0x62, 0x00, 0xD3, 0xFF},
	{0x62, 0x00, 0xFA, 0xFF},
	{0x5F, 0x60, 0x0F, 0xFF},
	{0x5F, 0x5F, 0x5F, 0xFF},
	{0x5F, 0x5E, 0x86, 0xFF},
	{0x60, 0x5C, 0xAD, 0xFF},
	{0x60, 0x5A, 0xD4, 0xFF},
	{0x61, 0x56, 0xFB, 0xFF},
	{0x5D, 0x88, 0x1A, 0xFF},
	{0x5D, 0x88, 0x61, 0xFF},
	{0x5D, 0x87, 0x87, 0xFF},
	{0x5E, 0x86, 0xAE, 0xFF},
	{0x5E, 0x84, 0xD4, 0xFF},
	{0x5F, 0x82, 0xFB, 0xFF},
	{0x5A, 0xB1, 0x24, 0xFF},
	{0x5A, 0xB0, 0x64, 0xFF},
	{0x5B, 0xB0, 0x89, 0xFF},
	{0x5B, 0xAF, 0xAF, 0xFF},
	{0x5B, 0xAE, 0xD6, 0xFF},
	{0x5C, 0xAD, 0xFC, 0xFF},
	{0x56, 0xD9, 0x2F, 0xFF},
	{0x56, 0xD9, 0x68, 0xFF},
	{0x57, 0xD9, 0x8C, 0xFF},
	{0x57, 0xD8, 0xB1, 0xFF},
	{0x58, 0xD7, 0xD7, 0xFF},
	{0x58, 0xD6, 0xFD, 0xFF},
	{0x51, 0xFF, 0x3A, 0xFF},
	{0x51, 0xFF, 0x6C, 0xFF},
	{0x51, 0xFF, 0x8F, 0xFF},
	{0x52, 0xFF, 0xB3, 0xFF},
	{0x52, 0xFF, 0xD9, 0xFF},
	{0x53, 0xFF, 0xFF, 0xFF},
	{0x89, 0x00, 0x00, 0xFF},
	{0x89, 0x00, 0x5D, 0xFF},
	{0x89, 0x00, 0x84, 0xFF},
	{0x89, 0x00, 0xAC, 0xFF},
	{0x8A, 0x00, 0xD3, 0xFF},
	{0x8A, 0x00, 0xFA, 0xFF},
	{0x88, 0x60, 0x0F, 0xFF},
	{0x88, 0x5F, 0x5F, 0xFF},
	{0x88, 0x5E, 0x86, 0xFF},
	{0x88, 0x5C, 0xAD, 0xFF},
	{0x89, 0x5A, 0xD4, 0xFF},
	{0x89, 0x56, 0xFB, 0xFF},
	{0x87, 0x88, 0x1A, 0xFF},
	{0x87, 0x88, 0x61, 0xFF},
	{0x87, 0x87, 0x87, 0xFF},
	{0x87, 0x86, 0xAE, 0xFF},
	{0x88, 0x84, 0xD4, 0xFF},
	{0x88, 0x82, 0xFB, 0xFF},
	{0x85, 0xB1, 0x24, 0xFF},
	{0x85, 0xB0, 0x64, 0xFF},
	{0x85, 0xB0, 0x89, 0xFF},
	{0x85, 0xAF, 0xAF, 0xFF},
	{0x86, 0xAE, 0xD6, 0xFF},
	{0x86, 0xAD, 0xFC, 0xFF},
	{0x83, 0xD9, 0x2F, 0xFF},
	{0x83, 0xD9, 0x68, 0xFF},
	{0x83, 0xD9, 0x8C, 0xFF},
	{0x83, 0xD8, 0xB1, 0xFF},
	{0x83, 0xD7, 0xD7, 0xFF},
	{0x84, 0xD6, 0xFD, 0xFF},
	{0x7F, 0xFF, 0x3A, 0xFF},
	{0x7F, 0xFF, 0x6C, 0xFF},
	{0x80, 0xFF, 0x8F, 0xFF},
	{0x80, 0xFF, 0xB3, 0xFF},
	{0x80, 0xFF, 0xD9, 0xFF},
	{0x81, 0xFF, 0xFF, 0xFF},
	{0xB1, 0x00, 0x01, 0xFF},
	{0xB2, 0x00, 0x5D, 0xFF},
	{0xB2, 0x00, 0x84, 0xFF},
	{0xB2, 0x00, 0xAC, 0xFF},
	{0xB2, 0x00, 0xD3, 0xFF},
	{0xB2, 0x00, 0xFA, 0xFF},
	{0xB1, 0x60, 0x0F, 0xFF},
	{0xB1, 0x5F, 0x5F, 0xFF},
	{0xB1, 0x5E, 0x86, 0xFF},
	{0xB1, 0x5C, 0xAD, 0xFF},
	{0xB1, 0x59, 0xD4, 0xFF},
	{0xB2, 0x56, 0xFB, 0xFF},
	{0xB0, 0x88, 0x1A, 0xFF},
	{0xB0, 0x88, 0x61, 0xFF},
	{0xB0, 0x87, 0x87, 0xFF},
	{0xB0, 0x86, 0xAE, 0xFF},
	{0xB0, 0x84, 0xD4, 0xFF},
	{0xB1, 0x82, 0xFB, 0xFF},
	{0xAF, 0xB1, 0x24, 0xFF},
	{0xAF, 0xB0, 0x64, 0xFF},
	{0xAF, 0xB0, 0x89, 0xFF},
	{0xAF, 0xAF, 0xAF, 0xFF},
	{0xAF, 0xAE, 0xD6, 0xFF},
	{0xB0, 0xAD, 0xFC, 0xFF},
	{0xAD, 0xD9, 0x2F, 0xFF},
	{0xAD, 0xD9, 0x68, 0xFF},
	{0xAD, 0xD8, 0x8C, 0xFF},
	{0xAD, 0xD8, 0xB1, 0xFF},
	{0xAE, 0xD7, 0xD7, 0xFF},
	{0xAE, 0xD6, 0xFE, 0xFF},
	{0xAB, 0xFF, 0x3A, 0xFF},
	{0xAB, 0xFF, 0x6C, 0xFF},
	{0xAB, 0xFF, 0x8F, 0xFF},
	{0xAB, 0xFF, 0xB3, 0xFF},
	{0xAB, 0xFF, 0xD9, 0xFF},
	{0xAC, 0xFF, 0xFF, 0xFF},
	{0xDA, 0x00, 0x01, 0xFF},
	{0xDA, 0x00, 0x5D, 0xFF},
	{0xDA, 0x00, 0x84, 0xFF},
	{0xDA, 0x00, 0xAC, 0xFF},
	{0xDA, 0x00, 0xD3, 0xFF},
	{0xDB, 0x00, 0xFA, 0xFF},
	{0xD9, 0x60, 0x10, 0xFF},
	{0xDA, 0x5F, 0x5F, 0xFF},
	{0xDA, 0x5D, 0x86, 0xFF},
	{0xDA, 0x5C, 0xAD, 0xFF},
	{0xDA, 0x59, 0xD4, 0xFF},
	{0xDA, 0x56, 0xFB, 0xFF},
	{0xD9, 0x88, 0x1A, 0xFF},
	{0xD9, 0x88, 0x61, 0xFF},
	{0xD9, 0x87, 0x87, 0xFF},
	{0xD9, 0x86, 0xAE, 0xFF},
	{0xD9, 0x84, 0xD4, 0xFF},
	{0xD9, 0x82, 0xFB, 0xFF},
	{0xD8, 0xB1, 0x25, 0xFF},
	{0xD8, 0xB0, 0x64, 0xFF},
	{0xD8, 0xB0, 0x89, 0xFF},
	{0xD8, 0xAF, 0xAF, 0xFF},
	{0xD8, 0xAE, 0xD6, 0xFF},
	{0xD9, 0xAC, 0xFC, 0xFF},
	{0xD7, 0xD9, 0x2F, 0xFF},
	{0xD7, 0xD9, 0x68, 0xFF},
	{0xD7, 0xD8, 0x8C, 0xFF},
	{0xD7, 0xD8, 0xB1, 0xFF},
	{0xD7, 0xD7, 0xD7, 0xFF},
	{0xD7, 0xD6, 0xFE, 0xFF},
	{0xD5, 0xFF, 0x3A, 0xFF},
	{0xD5, 0xFF, 0x6D, 0xFF},
	{0xD5, 0xFF, 0x8F, 0xFF},
	{0xD5, 0xFF, 0xB3, 0xFF},
	{0xD5, 0xFF, 0xD9, 0xFF},
	{0xD6, 0xFF, 0xFF, 0xFF},
	{0xFF, 0x00, 0x01, 0xFF},
	{0xFF, 0x00, 0x5D, 0xFF},
	{0xFF, 0x00, 0x84, 0xFF},
	{0xFF, 0x00, 0xAC, 0xFF},
	{0xFF, 0x00, 0xD3, 0xFF},
	{0xFF, 0x00, 0xFA, 0xFF},
	{0xFF, 0x5F, 0x10, 0xFF},
	{0xFF, 0x5E, 0x5F, 0xFF},
	{0xFF, 0x5D, 0x86, 0xFF},
	{0xFF, 0x5B, 0xAD, 0xFF},
	{0xFF, 0x59, 0xD4, 0xFF},
	{0xFF, 0x56, 0xFB, 0xFF},
	{0xFF, 0x88, 0x1A, 0xFF},
	{0xFF, 0x87, 0x61, 0xFF},
	{0xFF, 0x87, 0x87, 0xFF},
	{0xFF, 0x86, 0xAE, 0xFF},
	{0xFF, 0x84, 0xD4, 0xFF},
	{0xFF, 0x82, 0xFB, 0xFF},
	{0xFF, 0xB1, 0x25, 0xFF},
	{0xFF, 0xB0, 0x64, 0xFF},
	{0xFF, 0xB0, 0x89, 0xFF},
	{0xFF, 0xAF, 0xAF, 0xFF},
	{0xFF, 0xAE, 0xD6, 0xFF},
	{0xFF, 0xAC, 0xFC, 0xFF},
	{0xFF, 0xD9, 0x2F, 0xFF},
	{0xFF, 0xD9, 0x68, 0xFF},
	{0xFF, 0xD8, 0x8C, 0xFF},
	{0xFF, 0xD8, 0xB1, 0xFF},
	{0xFF, 0xD7, 0xD7, 0xFF},
	{0xFF, 0xD6, 0xFE, 0xFF},
	{0xFE, 0xFF, 0x3A, 0xFF},
	{0xFF, 0xFF, 0x6D, 0xFF},
	{0xFF, 0xFF, 0x8F, 0xFF},
	{0xFF, 0xFF, 0xB3, 0xFF},
	{0xFF, 0xFF, 0xD9, 0xFF},
	{0xFF, 0xFF, 0xFF, 0xFF},
	{0x08, 0x08, 0x08, 0xFF},
	{0x12, 0x12, 0x12, 0xFF},
	{0x1C, 0x1C, 0x1C, 0xFF},
	{0x26, 0x26, 0x26, 0xFF},
	{0x30, 0x30, 0x30, 0xFF},
	{0x3A, 0x3A, 0x3A, 0xFF},
	{0x44, 0x44, 0x44, 0xFF},
	{0x4E, 0x4E, 0x4E, 0xFF},
	{0x58, 0x58, 0x58, 0xFF},
	{0x62, 0x62, 0x62, 0xFF},
	{0x6C, 0x6C, 0x6C, 0xFF},
	{0x76, 0x76, 0x76, 0xFF},
	{0x80, 0x80, 0x80, 0xFF},
	{0x8A, 0x8A, 0x8A, 0xFF},
	{0x94, 0x94, 0x94, 0xFF},
	{0x9E, 0x9E, 0x9E, 0xFF},
	{0xA8, 0xA8, 0xA8, 0xFF},
	{0xB2, 0xB2, 0xB2, 0xFF},
	{0xBC, 0xBC, 0xBC, 0xFF},
	{0xC6, 0xC6, 0xC6, 0xFF},
	{0xD0, 0xD0, 0xD0, 0xFF},
	{0xDA, 0xDA, 0xDA, 0xFF},
	{0xE4, 0xE4, 0xE4, 0xFF},
	{0xEE, 0xEE, 0xEE, 0xFF},
}

// TermGnome is the colors as displayed on gnome-terminal.
//
// This table was generated via a screenshot generated by ./cmd/output256 sent
// to ./cmd/calibrate256 using the Pro theme.
var TermGnome = Palette{
	{0x2E, 0x34, 0x36, 0xFF},
	{0xCC, 0x00, 0x00, 0xFF},
	{0x4E, 0x9A, 0x06, 0xFF},
	{0xC4, 0xA0, 0x00, 0xFF},
	{0x34, 0x65, 0xA4, 0xFF},
	{0x75, 0x50, 0x7B, 0xFF},
	{0x06, 0x98, 0x9A, 0xFF},
	{0xD3, 0xD7, 0xCF, 0xFF},
	{0x55, 0x57, 0x53, 0xFF},
	{0xEF, 0x29, 0x29, 0xFF},
	{0x8A, 0xE2, 0x34, 0xFF},
	{0xFC, 0xE9, 0x4F, 0xFF},
	{0x72, 0x9F, 0xCF, 0xFF},
	{0xAD, 0x7F, 0xA8, 0xFF},
	{0x34, 0xE2, 0xE2, 0xFF},
	{0xEE, 0xEE, 0xEC, 0xFF},
	{0x00, 0x00, 0x00, 0xFF},
	{0x00, 0x00, 0x5F, 0xFF},
	{0x00, 0x00, 0x87, 0xFF},
	{0x00, 0x00, 0xAF, 0xFF},
	{0x00, 0x00, 0xD7, 0xFF},
	{0x00, 0x00, 0xFF, 0xFF},
	{0x00, 0x5F, 0x00, 0xFF},
	{0x00, 0x5F, 0x5F, 0xFF},
	{0x00, 0x5F, 0x87, 0xFF},
	{0x00, 0x5F, 0xAF, 0xFF},
	{0x00, 0x5F, 0xD7, 0xFF},
	{0x00, 0x5F, 0xFF, 0xFF},
	{0x00, 0x87, 0x00, 0xFF},
	{0x00, 0x87, 0x5F, 0xFF},
	{0x00, 0x87, 0x87, 0xFF},
	{0x00, 0x87, 0xAF, 0xFF},
	{0x00, 0x87, 0xD7, 0xFF},
	{0x00, 0x87, 0xFF, 0xFF},
	{0x00, 0xAF, 0x00, 0xFF},
	{0x00, 0xAF, 0x5F, 0xFF},
	{0x00, 0xAF, 0x87, 0xFF},
	{0x00, 0xAF, 0xAF, 0xFF},
	{0x00, 0xAF, 0xD7, 0xFF},
	{0x00, 0xAF, 0xFF, 0xFF},
	{0x00, 0xD7, 0x00, 0xFF},
	{0x00, 0xD7, 0x5F, 0xFF},
	{0x00, 0xD7, 0x87, 0xFF},
	{0x00, 0xD7, 0xAF, 0xFF},
	{0x00, 0xD7, 0xD7, 0xFF},
	{0x00, 0xD7, 0xFF, 0xFF},
	{0x00, 0xFF, 0x00, 0xFF},
	{0x00, 0xFF, 0x5F, 0xFF},
	{0x00, 0xFF, 0x87, 0xFF},
	{0x00, 0xFF, 0xAF, 0xFF},
	{0x00, 0xFF, 0xD7, 0xFF},
	{0x00, 0xFF, 0xFF, 0xFF},
	{0x5F, 0x00, 0x00, 0xFF},
	{0x5F, 0x00, 0x5F, 0xFF},
	{0x5F, 0x00, 0x87, 0xFF},
	{0x5F, 0x00, 0xAF, 0xFF},
	{0x5F, 0x00, 0xD7, 0xFF},
	{0x5F, 0x00, 0xFF, 0xFF},
	{0x5F, 0x5F, 0x00, 0xFF},
	{0x5F, 0x5F, 0x5F, 0xFF},
	{0x5F, 0x5F, 0x87, 0xFF},
	{0x5F, 0x5F, 0xAF, 0xFF},
	{0x5F, 0x5F, 0xD7, 0xFF},
	{0x5F, 0x5F, 0xFF, 0xFF},
	{0x5F, 0x87, 0x00, 0xFF},
	{0x5F, 0x87, 0x5F, 0xFF},
	{0x5F, 0x87, 0x87, 0xFF},
	{0x5F, 0x87, 0xAF, 0xFF},
	{0x5F, 0x87, 0xD7, 0xFF},
	{0x5F, 0x87, 0xFF, 0xFF},
	{0x5F, 0xAF, 0x00, 0xFF},
	{0x5F, 0xAF, 0x5F, 0xFF},
	{0x5F, 0xAF, 0x87, 0xFF},
	{0x5F, 0xAF, 0xAF, 0xFF},
	{0x5F, 0xAF, 0xD7, 0xFF},
	{0x5F, 0xAF, 0xFF, 0xFF},
	{0x5F, 0xD7, 0x00, 0xFF},
	{0x5F, 0xD7, 0x5F, 0xFF},
	{0x5F, 0xD7, 0x87, 0xFF},
	{0x5F, 0xD7, 0xAF, 0xFF},
	{0x5F, 0xD7, 0xD7, 0xFF},
	{0x5F, 0xD7, 0xFF, 0xFF},
	{0x5F, 0xFF, 0x00, 0xFF},
	{0x5F, 0xFF, 0x5F, 0xFF},
	{0x5F, 0xFF, 0x87, 0xFF},
	{0x5F, 0xFF, 0xAF, 0xFF},
	{0x5F, 0xFF, 0xD7, 0xFF},
	{0x5F, 0xFF, 0xFF, 0xFF},
	{0x87, 0x00, 0x00, 0xFF},
	{0x87, 0x00, 0x5F, 0xFF},
	{0x87, 0x00, 0x87, 0xFF},
	{0x87, 0x00, 0xAF, 0xFF},
	{0x87, 0x00, 0xD7, 0xFF},
	{0x87, 0x00, 0xFF, 0xFF},
	{0x87, 0x5F, 0x00, 0xFF},
	{0x87, 0x5F, 0x5F, 0xFF},
	{0x87, 0x5F, 0x87, 0xFF},
	{0x87, 0x5F, 0xAF, 0xFF},
	{0x87, 0x5F, 0xD7, 0xFF},
	{0x87, 0x5F, 0xFF, 0xFF},
	{0x87, 0x87, 0x00, 0xFF},
	{0x87, 0x87, 0x5F, 0xFF},
	{0x87, 0x87, 0x87, 0xFF},
	{0x87, 0x87, 0xAF, 0xFF},
	{0x87, 0x87, 0xD7, 0xFF},
	{0x87, 0x87, 0xFF, 0xFF},
	{0x87, 0xAF, 0x00, 0xFF},
	{0x87, 0xAF, 0x5F, 0xFF},
	{0x87, 0xAF, 0x87, 0xFF},
	{0x87, 0xAF, 0xAF, 0xFF},
	{0x87, 0xAF, 0xD7, 0xFF},
	{0x87, 0xAF, 0xFF, 0xFF},
	{0x87, 0xD7, 0x00, 0xFF},
	{0x87, 0xD7, 0x5F, 0xFF},
	{0x87, 0xD7, 0x87, 0xFF},
	{0x87, 0xD7, 0xAF, 0xFF},
	{0x87, 0xD7, 0xD7, 0xFF},
	{0x87, 0xD7, 0xFF, 0xFF},
	{0x87, 0xFF, 0x00, 0xFF},
	{0x87, 0xFF, 0x5F, 0xFF},
	{0x87, 0xFF, 0x87, 0xFF},
	{0x87, 0xFF, 0xAF, 0xFF},
	{0x87, 0xFF, 0xD7, 0xFF},
	{0x87, 0xFF, 0xFF, 0xFF},
	{0xAF, 0x00, 0x00, 0xFF},
	{0xAF, 0x00, 0x5F, 0xFF},
	{0xAF, 0x00, 0x87, 0xFF},
	{0xAF, 0x00, 0xAF, 0xFF},
	{0xAF, 0x00, 0xD7, 0xFF},
	{0xAF, 0x00, 0xFF, 0xFF},
	{0xAF, 0x5F, 0x00, 0xFF},
	{0xAF, 0x5F, 0x5F, 0xFF},
	{0xAF, 0x5F, 0x87, 0xFF},
	{0xAF, 0x5F, 0xAF, 0xFF},
	{0xAF, 0x5F, 0xD7, 0xFF},
	{0xAF, 0x5F, 0xFF, 0xFF},
	{0xAF, 0x87, 0x00, 0xFF},
	{0xAF, 0x87, 0x5F, 0xFF},
	{0xAF, 0x87, 0x87, 0xFF},
	{0xAF, 0x87, 0xAF, 0xFF},
	{0xAF, 0x87, 0xD7, 0xFF},
	{0xAF, 0x87, 0xFF, 0xFF},
	{0xAF, 0xAF, 0x00, 0xFF},
	{0xAF, 0xAF, 0x5F, 0xFF},
	{0xAF, 0xAF, 0x87, 0xFF},
	{0xAF, 0xAF, 0xAF, 0xFF},
	{0xAF, 0xAF, 0xD7, 0xFF},
	{0xAF, 0xAF, 0xFF, 0xFF},
	{0xAF, 0xD7, 0x00, 0xFF},
	{0xAF, 0xD7, 0x5F, 0xFF},
	{0xAF, 0xD7, 0x87, 0xFF},
	{0xAF, 0xD7, 0xAF, 0xFF},
	{0xAF, 0xD7, 0xD7, 0xFF},
	{0xAF, 0xD7, 0xFF, 0xFF},
	{0xAF, 0xFF, 0x00, 0xFF},
	{0xAF, 0xFF, 0x5F, 0xFF},
	{0xAF, 0xFF, 0x87, 0xFF},
	{0xAF, 0xFF, 0xAF, 0xFF},
	{0xAF, 0xFF, 0xD7, 0xFF},
	{0xAF, 0xFF, 0xFF, 0xFF},
	{0xD7, 0x00, 0x00, 0xFF},
	{0xD7, 0x00, 0x5F, 0xFF},
	{0xD7, 0x00, 0x87, 0xFF},
	{0xD7, 0x00, 0xAF, 0xFF},
	{0xD7, 0x00, 0xD7, 0xFF},
	{0xD7, 0x00, 0xFF, 0xFF},
	{0xD7, 0x5F, 0x00, 0xFF},
	{0xD7, 0x5F, 0x5F, 0xFF},
	{0xD7, 0x5F, 0x87, 0xFF},
	{0xD7, 0x5F, 0xAF, 0xFF},
	{0xD7, 0x5F, 0xD7, 0xFF},
	{0xD7, 0x5F, 0xFF, 0xFF},
	{0xD7, 0x87, 0x00, 0xFF},
	{0xD7, 0x87, 0x5F, 0xFF},
	{0xD7, 0x87, 0x87, 0xFF},
	{0xD7, 0x87, 0xAF, 0xFF},
	{0xD7, 0x87, 0xD7, 0xFF},
	{0xD7, 0x87, 0xFF, 0xFF},
	{0xD7, 0xAF, 0x00, 0xFF},
	{0xD7, 0xAF, 0x5F, 0xFF},
	{0xD7, 0xAF, 0x87, 0xFF},
	{0xD7, 0xAF, 0xAF, 0xFF},
	{0xD7, 0xAF, 0xD7, 0xFF},
	{0xD7, 0xAF, 0xFF, 0xFF},
	{0xD7, 0xD7, 0x00, 0xFF},
	{0xD7, 0xD7, 0x5F, 0xFF},
	{0xD7, 0xD7, 0x87, 0xFF},
	{0xD7, 0xD7, 0xAF, 0xFF},
	{0xD7, 0xD7, 0xD7, 0xFF},
	{0xD7, 0xD7, 0xFF, 0xFF},
	{0xD7, 0xFF, 0x00, 0xFF},
	{0xD7, 0xFF, 0x5F, 0xFF},
	{0xD7, 0xFF, 0x87, 0xFF},
	{0xD7, 0xFF, 0xAF, 0xFF},
	{0xD7, 0xFF, 0xD7, 0xFF},
	{0xD7, 0xFF, 0xFF, 0xFF},
	{0xFF, 0x00, 0x00, 0xFF},
	{0xFF, 0x00, 0x5F, 0xFF},
	{0xFF, 0x00, 0x87, 0xFF},
	{0xFF, 0x00, 0xAF, 0xFF},
	{0xFF, 0x00, 0xD7, 0xFF},
	{0xFF, 0x00, 0xFF, 0xFF},
	{0xFF, 0x5F, 0x00, 0xFF},
	{0xFF, 0x5F, 0x5F, 0xFF},
	{0xFF, 0x5F, 0x87, 0xFF},
	{0xFF, 0x5F, 0xAF, 0xFF},
	{0xFF, 0x5F, 0xD7, 0xFF},
	{0xFF, 0x5F, 0xFF, 0xFF},
	{0xFF, 0x87, 0x00, 0xFF},
	{0xFF, 0x87, 0x5F, 0xFF},
	{0xFF, 0x87, 0x87, 0xFF},
	{0xFF, 0x87, 0xAF, 0xFF},
	{0xFF, 0x87, 0xD7, 0xFF},
	{0xFF, 0x87, 0xFF, 0xFF},
	{0xFF, 0xAF, 0x00, 0xFF},
	{0xFF, 0xAF, 0x5F, 0xFF},
	{0xFF, 0xAF, 0x87, 0xFF},
	{0xFF, 0xAF, 0xAF, 0xFF},
	{0xFF, 0xAF, 0xD7, 0xFF},
	{0xFF, 0xAF, 0xFF, 0xFF},
	{0xFF, 0xD7, 0x00, 0xFF},
	{0xFF, 0xD7, 0x5F, 0xFF},
	{0xFF, 0xD7, 0x87, 0xFF},
	{0xFF, 0xD7, 0xAF, 0xFF},
	{0xFF, 0xD7, 0xD7, 0xFF},
	{0xFF, 0xD7, 0xFF, 0xFF},
	{0xFF, 0xFF, 0x00, 0xFF},
	{0xFF, 0xFF, 0x5F, 0xFF},
	{0xFF, 0xFF, 0x87, 0xFF},
	{0xFF, 0xFF, 0xAF, 0xFF},
	{0xFF, 0xFF, 0xD7, 0xFF},
	{0xFF, 0xFF, 0xFF, 0xFF},
	{0x08, 0x08, 0x08, 0xFF},
	{0x12, 0x12, 0x12, 0xFF},
	{0x1C, 0x1C, 0x1C, 0xFF},
	{0x26, 0x26, 0x26, 0xFF},
	{0x30, 0x30, 0x30, 0xFF},
	{0x3A, 0x3A, 0x3A, 0xFF},
	{0x44, 0x44, 0x44, 0xFF},
	{0x4E, 0x4E, 0x4E, 0xFF},
	{0x58, 0x58, 0x58, 0xFF},
	{0x62, 0x62, 0x62, 0xFF},
	{0x6C, 0x6C, 0x6C, 0xFF},
	{0x76, 0x76, 0x76, 0xFF},
	{0x80, 0x80, 0x80, 0xFF},
	{0x8A, 0x8A, 0x8A, 0xFF},
	{0x94, 0x94, 0x94, 0xFF},
	{0x9E, 0x9E, 0x9E, 0xFF},
	{0xA8, 0xA8, 0xA8, 0xFF},
	{0xB2, 0xB2, 0xB2, 0xFF},
	{0xBC, 0xBC, 0xBC, 0xFF},
	{0xC6, 0xC6, 0xC6, 0xFF},
	{0xD0, 0xD0, 0xD0, 0xFF},
	{0xDA, 0xDA, 0xDA, 0xFF},
	{0xE4, 0xE4, 0xE4, 0xFF},
	{0xEE, 0xEE, 0xEE, 0xFF},
}

//

// getDelta returns the eucledian distance.
func getDelta(r, g, b int, c color.NRGBA) int {
	dR := r - int(c.R)
	dG := g - int(c.G)
	dB := b - int(c.B)
	return dR*dR + dG*dG + dB*dB
}

type deltas []item

type item struct {
	index int
	delta int
}

func (d deltas) Len() int           { return len(d) }
func (d deltas) Less(i, j int) bool { return d[i].delta < d[j].delta }
func (d deltas) Swap(i, j int)      { d[j], d[i] = d[i], d[j] }
